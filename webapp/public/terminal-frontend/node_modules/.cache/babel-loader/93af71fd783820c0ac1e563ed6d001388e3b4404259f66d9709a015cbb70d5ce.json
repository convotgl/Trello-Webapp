{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Terminal WebApp\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.command = $event),\n    placeholder: \"Enter command\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.command]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.executeCommand && $options.executeCommand(...args))\n  }, \"Execute\"), _createElementVNode(\"pre\", null, _toDisplayString($data.output), 1 /* TEXT */), _createElementVNode(\"pre\", null, _toDisplayString($data.boards), 1 /* TEXT */), _createElementVNode(\"pre\", null, _toDisplayString($data.lists), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["id","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_cache","$event","$data","command","placeholder","onClick","args","$options","executeCommand","_toDisplayString","output","boards","lists"],"sources":["F:\\webapp\\public\\terminal-frontend\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Terminal WebApp</h1>\n    <textarea v-model=\"command\" placeholder=\"Enter command\"></textarea>\n    <button @click=\"executeCommand\">Execute</button>\n    <pre>{{ output }}</pre>\n    <pre>{{ boards }}</pre>\n    <pre>{{ lists }}</pre>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      command: '',\n      output: '',\n      boards: '',\n      lists: ''\n    };\n  },\n  methods: {\n    async executeCommand() {\n      try {\n        const [action, ...args] = this.command.split(' ');\n        switch (action) {\n          case 'get':\n            if (args[0] === 'boards') {\n              await this.fetchBoards();\n            } else if (args[0] === 'lists') {\n              await this.fetchLists(args[1]);\n            }\n            break;\n          case 'create':\n            if (args[0] === 'card') {\n              await this.createCard(args[1], args[2], args.slice(3).join(' '));\n            }\n            break;\n          case 'move':\n            if (args[0] === 'card') {\n              await this.moveCard(args[1], args[2]);\n            }\n            break;\n          case 'delete':\n            if (args[0] === 'card') {\n              await this.deleteCard(args[1]);\n            }\n            break;\n          default:\n            this.output = 'Unknown command';\n        }\n      } catch (error) {\n        this.output = error.response.data;\n      }\n    },\n    async fetchBoards() {\n      try {\n        const response = await axios.get('/boards');\n        this.boards = response.data;\n      } catch (error) {\n        this.boards = 'Error fetching boards';\n      }\n    },\n    async fetchLists(boardId) {\n      try {\n        const response = await axios.get(`/lists/${boardId}`);\n        this.lists = response.data;\n      } catch (error) {\n        this.lists = 'Error fetching lists';\n      }\n    },\n    async createCard(listId, name, desc) {\n      try {\n        const response = await axios.post('/cards', { listId, name, desc });\n        this.output = response.data;\n      } catch (error) {\n        this.output = error.response.data;\n      }\n    },\n    async moveCard(cardId, listId) {\n      try {\n        const response = await axios.put(`/cards/${cardId}/move`, { listId });\n        this.output = response.data;\n      } catch (error) {\n        this.output = error.response.data;\n      }\n    },\n    async deleteCard(cardId) {\n      try {\n        const response = await axios.delete(`/cards/${cardId}`);\n        this.output = response.data;\n      } catch (error) {\n        this.output = error.response.data;\n      }\n    }\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  text-align: center;\n  margin-top: 60px;\n}\ntextarea {\n  width: 80%;\n  height: 100px;\n  margin-bottom: 20px;\n}\nbutton {\n  display: block;\n  margin: 0 auto;\n}\npre {\n  text-align: left;\n  background: #f4f4f4;\n  padding: 10px;\n  border: 1px solid #ccc;\n  width: 80%;\n  margin: 20px auto;\n  white-space: pre-wrap;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;gCACXC,mBAAA,CAAwB,YAApB,iBAAe;;uBADrBC,mBAAA,CAOM,OAPNC,UAOM,GANJC,UAAwB,E,gBACxBH,mBAAA,CAAmE;IAHvE,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAGuBC,KAAA,CAAAC,OAAO,GAAAF,MAAA;IAAEG,WAAW,EAAC;iDAArBF,KAAA,CAAAC,OAAO,E,GAC1BP,mBAAA,CAAgD;IAAvCS,OAAK,EAAAL,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAAC,cAAA,IAAAD,QAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;KAAE,SAAO,GACvCV,mBAAA,CAAuB,aAAAa,gBAAA,CAAfP,KAAA,CAAAQ,MAAM,kBACdd,mBAAA,CAAuB,aAAAa,gBAAA,CAAfP,KAAA,CAAAS,MAAM,kBACdf,mBAAA,CAAsB,aAAAa,gBAAA,CAAdP,KAAA,CAAAU,KAAK,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}