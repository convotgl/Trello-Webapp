{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      command: '',\n      // Command entered by the user\n      output: '',\n      // Output of the executed command\n      boards: null,\n      // List of boards fetched from the server\n      lists: null,\n      // List of lists fetched from the server\n      cards: null // List of cards fetched from the server\n    };\n  },\n  methods: {\n    // Refresh the page\n    refreshPage() {\n      window.location.reload();\n    },\n    // Execute the command entered by the user\n    async executeCommand() {\n      try {\n        // Split the command into action and arguments\n        const [action, ...args] = this.command.split(' ');\n        switch (action) {\n          case 'get':\n            if (args[0] === 'boards') {\n              // Fetch boards if the command is 'get boards'\n              await this.fetchBoards();\n            } else if (args[0] === 'lists') {\n              // Fetch lists if the command is 'get lists <board_id>'\n              await this.fetchLists(args[1]);\n            } else if (args[0] === 'cards') {\n              // Fetch cards if the command is 'get cards <list_id>'\n              await this.fetchCards(args[1]);\n            }\n            break;\n          case 'create':\n            if (args[0] === 'board') {\n              // Create a board if the command is 'create board <board_name>'\n              await this.createBoard(args.slice(1).join(' '));\n            } else if (args[0] === 'list') {\n              // Create a list if the command is 'create list <board_id> <list_name>'\n              await this.createList(args[1], args.slice(2).join(' '));\n            } else if (args[0] === 'card') {\n              // Create a card if the command is 'create card <list_id> <card_name> <card_desc>'\n              await this.createCard(args[1], args[2], args.slice(3).join(' '));\n            }\n            break;\n          case 'delete':\n            if (args[0] === 'board') {\n              // Delete a board if the command is 'delete board <board_id>'\n              await this.deleteBoard(args[1]);\n            } else if (args[0] === 'list') {\n              // Delete a list if the command is 'delete list <list_id>'\n              await this.deleteList(args[1]);\n            } else if (args[0] === 'card') {\n              // Delete a card if the command is 'delete card <card_id>'\n              await this.deleteCard(args[1]);\n            }\n            break;\n          case 'move':\n            if (args[0] === 'card') {\n              // Move a card if the command is 'move card <card_id> <list_id>'\n              await this.moveCard(args[1], args[2]);\n            }\n            break;\n          default:\n            // Set output to 'Unknown command' if the command is not recognized\n            this.output = 'Unknown command';\n        }\n      } catch (error) {\n        // Set output to error message if an error occurs\n        this.output = error.response ? error.response.data : error.message;\n      }\n    },\n    // Fetch boards from the server\n    async fetchBoards() {\n      try {\n        const response = await axios.get('/boards');\n        this.boards = response.data;\n      } catch (error) {\n        this.output = 'Error fetching boards: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Fetch lists from the server for a specific board\n    async fetchLists(boardId) {\n      try {\n        const response = await axios.get(`/lists/${boardId}`);\n        this.lists = response.data;\n      } catch (error) {\n        this.output = 'Error fetching lists: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Fetch cards from the server for a specified list\n    async fetchCards(listId) {\n      try {\n        const response = await axios.get(`/cards/${listId}`);\n        this.cards = response.data;\n      } catch (error) {\n        this.cards = 'Error fetching cards: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Create a new board\n    async createBoard(name) {\n      try {\n        const response = await axios.post('/boards', {\n          name\n        });\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error creating board: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Delete a board\n    async deleteBoard(boardId) {\n      try {\n        const response = await axios.delete(`/boards/${boardId}`);\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error deleting board: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Create a new list in a specific board\n    async createList(boardId, name) {\n      try {\n        const response = await axios.post('/lists', {\n          boardId,\n          name\n        });\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error creating list: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Delete a list\n    async deleteList(listId) {\n      try {\n        const response = await axios.delete(`/lists/${listId}`);\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error deleting list: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Create a new card in a specific list\n    async createCard(listId, name, desc) {\n      try {\n        const response = await axios.post('/cards', {\n          listId,\n          name,\n          desc\n        });\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error creating card: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Move a card to a different list\n    async moveCard(cardId, listId) {\n      try {\n        const response = await axios.put(`/cards/${cardId}/idList`, {\n          value: listId\n        });\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error moving card: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Delete a card\n    async deleteCard(cardId) {\n      try {\n        const response = await axios.delete(`/cards/${cardId}`);\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error deleting card: ' + (error.response ? error.response.data : error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","command","output","boards","lists","cards","methods","refreshPage","window","location","reload","executeCommand","action","args","split","fetchBoards","fetchLists","fetchCards","createBoard","slice","join","createList","createCard","deleteBoard","deleteList","deleteCard","moveCard","error","response","message","get","boardId","listId","name","post","delete","desc","cardId","put","value"],"sources":["F:\\CS203A2\\webapp\\public\\terminal-frontend\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <!-- Header with a clickable title to refresh the page -->\n    <header class=\"header\">\n      <div class=\"header-content\">\n        <h1 class=\"title\" @click=\"refreshPage\">Trello WebApp</h1>\n      </div>\n    </header>\n    <div class=\"container\">\n      <!-- Sidebar displaying a list of available commands -->\n      <div class=\"sidebar\">\n        <h2>Commands</h2>\n        <ul>\n          <li>get boards</li>\n          <li>get lists &lt;board_id&gt;</li>\n          <li>get cards &lt;list_id&gt;</li>\n          <li>create board &lt;board_name&gt;</li>\n          <li>delete board &lt;board_id&gt;</li>\n          <li>create list &lt;board_id&gt; &lt;list_name&gt;</li>\n          <li>delete list &lt;list_id&gt;</li>\n          <li>create card &lt;list_id&gt; &lt;card_name&gt; &lt;card_desc&gt;</li>\n          <li>move card &lt;card_id&gt; &lt;list_id&gt;</li>\n          <li>delete card &lt;card_id&gt;</li>\n        </ul>\n      </div>\n      <!-- Terminal container for command input and output display -->\n      <div class=\"terminal-container\">\n        <h3 class=\"terminal-title\">Command Input</h3>\n        <!-- Textarea for command input -->\n        <textarea v-model=\"command\" placeholder=\"Enter command\"></textarea>\n        <!-- Button to execute the command -->\n        <button @click=\"executeCommand\">Execute</button>\n        <div class=\"output\">\n          <!-- Output display area -->\n          <pre>{{ output }}</pre>\n          <!-- Display boards if available -->\n          <div v-if=\"boards\" class=\"boards\">\n            <h2>Boards</h2>\n            <ul>\n              <li v-for=\"board in boards\" :key=\"board.id\">\n                <strong>{{ board.name }}</strong>\n                <p>ID: {{ board.id }}</p>\n                <p>Description: {{ board.desc }}</p>\n              </li>\n            </ul>\n          </div>\n          <!-- Display lists if available -->\n          <div v-if=\"lists\" class=\"lists\">\n            <h2>Lists</h2>\n            <ul>\n              <li v-for=\"list in lists\" :key=\"list.id\">\n                <strong>{{ list.name }}</strong>\n                <p>ID: {{ list.id }}</p>\n              </li>\n            </ul>\n          </div>\n          <div v-if=\"cards\" class=\"cards\">\n            <h2>Cards</h2>\n            <ul>\n              <li v-for=\"card in cards\" :key=\"card.id\">\n                <strong>{{ card.name }}</strong>\n                <p>ID: {{ card.id }}</p>\n                <p>Description: {{ card.desc }}</p>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      command: '', // Command entered by the user\n      output: '', // Output of the executed command\n      boards: null, // List of boards fetched from the server\n      lists: null, // List of lists fetched from the server\n      cards: null // List of cards fetched from the server\n    };\n  },\n  methods: {\n    // Refresh the page\n    refreshPage() {\n      window.location.reload();\n    },\n    // Execute the command entered by the user\n    async executeCommand() {\n      try {\n        // Split the command into action and arguments\n        const [action, ...args] = this.command.split(' ');\n        switch (action) {\n          case 'get':\n            if (args[0] === 'boards') {\n              // Fetch boards if the command is 'get boards'\n              await this.fetchBoards();\n            } else if (args[0] === 'lists') {\n              // Fetch lists if the command is 'get lists <board_id>'\n              await this.fetchLists(args[1]);\n            } else if (args[0] === 'cards') { \n              // Fetch cards if the command is 'get cards <list_id>'\n              await this.fetchCards(args[1]);\n            }\n            break;\n          case 'create':\n            if (args[0] === 'board') {\n              // Create a board if the command is 'create board <board_name>'\n              await this.createBoard(args.slice(1).join(' '));\n            } else if (args[0] === 'list') {\n              // Create a list if the command is 'create list <board_id> <list_name>'\n              await this.createList(args[1], args.slice(2).join(' '));\n            } else if (args[0] === 'card') {\n              // Create a card if the command is 'create card <list_id> <card_name> <card_desc>'\n              await this.createCard(args[1], args[2], args.slice(3).join(' '));\n            }\n            break;\n          case 'delete':\n            if (args[0] === 'board') {\n              // Delete a board if the command is 'delete board <board_id>'\n              await this.deleteBoard(args[1]);\n            } else if (args[0] === 'list') {\n              // Delete a list if the command is 'delete list <list_id>'\n              await this.deleteList(args[1]);\n            } else if (args[0] === 'card') {\n              // Delete a card if the command is 'delete card <card_id>'\n              await this.deleteCard(args[1]);\n            }\n            break;\n          case 'move':\n            if (args[0] === 'card') {\n              // Move a card if the command is 'move card <card_id> <list_id>'\n              await this.moveCard(args[1], args[2]);\n            }\n            break;\n          default:\n            // Set output to 'Unknown command' if the command is not recognized\n            this.output = 'Unknown command';\n        }\n      } catch (error) {\n        // Set output to error message if an error occurs\n        this.output = error.response ? error.response.data : error.message;\n      }\n    },\n    // Fetch boards from the server\n    async fetchBoards() {\n      try {\n        const response = await axios.get('/boards');\n        this.boards = response.data;\n      } catch (error) {\n        this.output = 'Error fetching boards: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Fetch lists from the server for a specific board\n    async fetchLists(boardId) {\n      try {\n        const response = await axios.get(`/lists/${boardId}`);\n        this.lists = response.data;\n      } catch (error) {\n        this.output = 'Error fetching lists: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Fetch cards from the server for a specified list\n    async fetchCards(listId) { \n      try {\n        const response = await axios.get(`/cards/${listId}`);\n        this.cards = response.data;\n      } catch (error) {\n        this.cards = 'Error fetching cards: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Create a new board\n    async createBoard(name) {\n      try {\n        const response = await axios.post('/boards', { name });\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error creating board: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Delete a board\n    async deleteBoard(boardId) {\n      try {\n        const response = await axios.delete(`/boards/${boardId}`);\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error deleting board: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Create a new list in a specific board\n    async createList(boardId, name) {\n      try {\n        const response = await axios.post('/lists', { boardId, name });\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error creating list: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Delete a list\n    async deleteList(listId) {\n      try {\n        const response = await axios.delete(`/lists/${listId}`);\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error deleting list: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Create a new card in a specific list\n    async createCard(listId, name, desc) {\n      try {\n        const response = await axios.post('/cards', { listId, name, desc });\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error creating card: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Move a card to a different list\n    async moveCard(cardId, listId) {\n      try {\n        const response = await axios.put(`/cards/${cardId}/idList`, { value: listId });\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error moving card: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Delete a card\n    async deleteCard(cardId) {\n      try {\n        const response = await axios.delete(`/cards/${cardId}`);\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error deleting card: ' + (error.response ? error.response.data : error.message);\n      }\n    }\n  }\n};\n</script>\n\n<style>\nbody {\n  background-color: #2e2e2e; /* Background color for the entire page */\n  color: #dcdcdc; /* Default text color */\n  font-family: 'Courier New', Courier, monospace; /* Font style */\n  margin: 0; /* Remove default margin */\n  padding: 0; /* Remove default padding */\n}\n\n#app {\n  padding: 0; /* Remove default padding */\n}\n\n.header {\n  background-color: #1c1c1c; /* Background color for the header */\n  padding: 10px 20px; /* Padding inside the header */\n}\n\n.header .header-content {\n  display: inline-block; /* Inline block for header content */\n}\n\n.header h1 {\n  color: #ffffff; /* Text color for the header title */\n  margin: 0; /* Remove default margin */\n  cursor: pointer; /* Pointer cursor for clickable title */\n}\n\n.container {\n  display: flex; /* Flexbox layout for the container */\n  justify-content: center; /* Center the content horizontally */\n}\n\n.sidebar {\n  width: 20%; /* Width of the sidebar */\n  background-color: #1c1c1c; /* Background color for the sidebar */\n  padding: 20px; /* Padding inside the sidebar */\n  color: #dcdcdc; /* Text color for the sidebar */\n  text-align: left; /* Left-aligned text */\n  position: absolute; /* Positioned absolutely */\n  left: 0; /* Aligned to the left */\n  top: 70px; /* Adjusted to leave space for header */\n}\n\n.sidebar h2 {\n  border-bottom: 1px solid #444444; /* Bottom border for the sidebar heading */\n  padding-bottom: 10px; /* Padding below the heading */\n}\n\n.sidebar ul {\n  list-style: none; /* Remove default list style */\n  padding: 0; /* Remove default padding */\n}\n\n.sidebar li {\n  margin: 10px 0; /* Margin between list items */\n}\n\n.terminal-container {\n  width: 60%; /* Width of the terminal container */\n  display: flex; /* Flexbox layout for the terminal container */\n  flex-direction: column; /* Column layout */\n  align-items: center; /* Center align items */\n  padding: 20px; /* Padding inside the container */\n  margin-left: 20%; /* Adjusted to account for sidebar width */\n}\n\n.terminal-title {\n  color: #ffffff; /* Text color for the terminal title */\n  text-align: left; /* Left-aligned text */\n  margin-bottom: 10px; /* Space below the title */\n}\n\ntextarea {\n  width: 60%; /* Adjusted width to be slightly shorter */\n  height: 40px; /* Fixed height */\n  background-color: #000000; /* Background color for textarea */\n  color: #dcdcdc; /* Text color for textarea */\n  border: 1px solid #444444; /* Border for textarea */\n  margin-bottom: 10px; /* Margin below textarea */\n  padding: 10px; /* Padding inside textarea */\n  box-sizing: border-box; /* Include padding and border in width and height */\n  resize: none; /* Disable resizing */\n}\n\nbutton {\n  background-color: #444444; /* Background color for button */\n  color: #dcdcdc; /* Text color for button */\n  border: none; /* Remove border */\n  padding: 10px 20px; /* Padding inside button */\n  cursor: pointer; /* Pointer cursor for button */\n  margin-bottom: 10px; /* Margin below button */\n}\n\n.output {\n  text-align: left; /* Left-aligned text */\n  width: 100%; /* Full width */\n  margin-top: 20px; /* Margin above output */\n}\n\n.output pre {\n  background-color: #333333; /* Background color for preformatted text */\n  padding: 10px; /* Padding inside preformatted text */\n  border-radius: 5px; /* Rounded corners */\n  white-space: pre-wrap; /* Wrap text in preformatted text */\n}\n\n.output h2 {\n  color: #ffffff; /* Text color for headings in output */\n  margin-top: 20px; /* Margin above headings in output */\n}\n\n.output ul {\n  list-style-type: none; /* Remove default list style */\n  padding: 0; /* Remove default padding */\n}\n\n.output li {\n  margin-bottom: 10px; /* Margin between list items */\n}\n\n@media (max-width: 768px) {\n  .container {\n    flex-direction: column; /* Column layout on small screens */\n    align-items: center; /* Center align items */\n  }\n\n  .sidebar {\n    width: 100%; /* Full width for sidebar on small screens */\n    position: static; /* Revert position for mobile */\n    margin-bottom: 20px; /* Space between sidebar and terminal for mobile */\n  }\n\n  .terminal-container {\n    width: 100%; /* Full width for terminal container on small screens */\n    margin-left: 0; /* Remove margin for mobile */\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}