{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  class: \"header\"\n};\nconst _hoisted_3 = {\n  class: \"header-content\"\n};\nconst _hoisted_4 = {\n  class: \"container\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"sidebar\\\"><h2>Commands</h2><ul><li>get boards</li><li>get lists &lt;board_id&gt;</li><li>get cards &lt;list_id&gt;</li><li>create board &lt;board_name&gt;</li><li>delete board &lt;board_id&gt;</li><li>create list &lt;board_id&gt; &lt;list_name&gt;</li><li>delete list &lt;list_id&gt;</li><li>create card &lt;list_id&gt; &lt;card_name&gt; &lt;card_desc&gt;</li><li>move card &lt;card_id&gt; &lt;list_id&gt;</li><li>delete card &lt;card_id&gt;</li></ul></div>\", 1);\nconst _hoisted_6 = {\n  class: \"terminal-container\"\n};\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"h3\", {\n  class: \"terminal-title\"\n}, \"Command Input\", -1 /* HOISTED */);\nconst _hoisted_8 = {\n  class: \"output\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"boards\"\n};\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Boards\", -1 /* HOISTED */);\nconst _hoisted_11 = {\n  key: 1,\n  class: \"lists\"\n};\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Lists\", -1 /* HOISTED */);\nconst _hoisted_13 = {\n  key: 2,\n  class: \"cards\"\n};\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Cards\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Header with a clickable title to refresh the page \"), _createElementVNode(\"header\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"h1\", {\n    class: \"title\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.refreshPage && $options.refreshPage(...args))\n  }, \"Trello WebApp\")])]), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" Sidebar displaying a list of available commands \"), _hoisted_5, _createCommentVNode(\" Terminal container for command input and output display \"), _createElementVNode(\"div\", _hoisted_6, [_hoisted_7, _createCommentVNode(\" Textarea for command input \"), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.command = $event),\n    placeholder: \"Enter command\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.command]]), _createCommentVNode(\" Button to execute the command \"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.executeCommand && $options.executeCommand(...args))\n  }, \"Execute\"), _createElementVNode(\"div\", _hoisted_8, [_createCommentVNode(\" Output display area \"), _createElementVNode(\"pre\", null, _toDisplayString($data.output), 1 /* TEXT */), _createCommentVNode(\" Display boards if available \"), $data.boards ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_hoisted_10, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.boards, board => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: board.id\n    }, [_createElementVNode(\"strong\", null, _toDisplayString(board.name), 1 /* TEXT */), _createElementVNode(\"p\", null, \"ID: \" + _toDisplayString(board.id), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Description: \" + _toDisplayString(board.desc), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Display lists if available \"), $data.lists ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_hoisted_12, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.lists, list => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: list.id\n    }, [_createElementVNode(\"strong\", null, _toDisplayString(list.name), 1 /* TEXT */), _createElementVNode(\"p\", null, \"ID: \" + _toDisplayString(list.id), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), $data.cards ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_hoisted_14, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.cards, card => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: card.id\n    }, [_createElementVNode(\"strong\", null, _toDisplayString(card.name), 1 /* TEXT */), _createElementVNode(\"p\", null, \"ID: \" + _toDisplayString(card.id), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Description: \" + _toDisplayString(card.desc), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])])])]);\n}","map":{"version":3,"names":["id","class","_createStaticVNode","_createElementVNode","key","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","onClick","_cache","args","$options","refreshPage","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","$event","$data","command","placeholder","executeCommand","_hoisted_8","_toDisplayString","output","boards","_hoisted_9","_hoisted_10","_Fragment","_renderList","board","name","desc","lists","_hoisted_11","_hoisted_12","list","cards","_hoisted_13","_hoisted_14","card"],"sources":["F:\\CS203A2\\webapp\\public\\terminal-frontend\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <!-- Header with a clickable title to refresh the page -->\n    <header class=\"header\">\n      <div class=\"header-content\">\n        <h1 class=\"title\" @click=\"refreshPage\">Trello WebApp</h1>\n      </div>\n    </header>\n    <div class=\"container\">\n      <!-- Sidebar displaying a list of available commands -->\n      <div class=\"sidebar\">\n        <h2>Commands</h2>\n        <ul>\n          <li>get boards</li>\n          <li>get lists &lt;board_id&gt;</li>\n          <li>get cards &lt;list_id&gt;</li>\n          <li>create board &lt;board_name&gt;</li>\n          <li>delete board &lt;board_id&gt;</li>\n          <li>create list &lt;board_id&gt; &lt;list_name&gt;</li>\n          <li>delete list &lt;list_id&gt;</li>\n          <li>create card &lt;list_id&gt; &lt;card_name&gt; &lt;card_desc&gt;</li>\n          <li>move card &lt;card_id&gt; &lt;list_id&gt;</li>\n          <li>delete card &lt;card_id&gt;</li>\n        </ul>\n      </div>\n      <!-- Terminal container for command input and output display -->\n      <div class=\"terminal-container\">\n        <h3 class=\"terminal-title\">Command Input</h3>\n        <!-- Textarea for command input -->\n        <textarea v-model=\"command\" placeholder=\"Enter command\"></textarea>\n        <!-- Button to execute the command -->\n        <button @click=\"executeCommand\">Execute</button>\n        <div class=\"output\">\n          <!-- Output display area -->\n          <pre>{{ output }}</pre>\n          <!-- Display boards if available -->\n          <div v-if=\"boards\" class=\"boards\">\n            <h2>Boards</h2>\n            <ul>\n              <li v-for=\"board in boards\" :key=\"board.id\">\n                <strong>{{ board.name }}</strong>\n                <p>ID: {{ board.id }}</p>\n                <p>Description: {{ board.desc }}</p>\n              </li>\n            </ul>\n          </div>\n          <!-- Display lists if available -->\n          <div v-if=\"lists\" class=\"lists\">\n            <h2>Lists</h2>\n            <ul>\n              <li v-for=\"list in lists\" :key=\"list.id\">\n                <strong>{{ list.name }}</strong>\n                <p>ID: {{ list.id }}</p>\n              </li>\n            </ul>\n          </div>\n          <div v-if=\"cards\" class=\"cards\">\n            <h2>Cards</h2>\n            <ul>\n              <li v-for=\"card in cards\" :key=\"card.id\">\n                <strong>{{ card.name }}</strong>\n                <p>ID: {{ card.id }}</p>\n                <p>Description: {{ card.desc }}</p>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      command: '', // Command entered by the user\n      output: '', // Output of the executed command\n      boards: null, // List of boards fetched from the server\n      lists: null, // List of lists fetched from the server\n      cards: null // List of cards fetched from the server\n    };\n  },\n  methods: {\n    // Refresh the page\n    refreshPage() {\n      window.location.reload();\n    },\n    // Execute the command entered by the user\n    async executeCommand() {\n      try {\n        // Split the command into action and arguments\n        const [action, ...args] = this.command.split(' ');\n        switch (action) {\n          case 'get':\n            if (args[0] === 'boards') {\n              // Fetch boards if the command is 'get boards'\n              await this.fetchBoards();\n            } else if (args[0] === 'lists') {\n              // Fetch lists if the command is 'get lists <board_id>'\n              await this.fetchLists(args[1]);\n            } else if (args[0] === 'cards') { \n              // Fetch cards if the command is 'get cards <list_id>'\n              await this.fetchCards(args[1]);\n            }\n            break;\n          case 'create':\n            if (args[0] === 'board') {\n              // Create a board if the command is 'create board <board_name>'\n              await this.createBoard(args.slice(1).join(' '));\n            } else if (args[0] === 'list') {\n              // Create a list if the command is 'create list <board_id> <list_name>'\n              await this.createList(args[1], args.slice(2).join(' '));\n            } else if (args[0] === 'card') {\n              // Create a card if the command is 'create card <list_id> <card_name> <card_desc>'\n              await this.createCard(args[1], args[2], args.slice(3).join(' '));\n            }\n            break;\n          case 'delete':\n            if (args[0] === 'board') {\n              // Delete a board if the command is 'delete board <board_id>'\n              await this.deleteBoard(args[1]);\n            } else if (args[0] === 'list') {\n              // Delete a list if the command is 'delete list <list_id>'\n              await this.deleteList(args[1]);\n            } else if (args[0] === 'card') {\n              // Delete a card if the command is 'delete card <card_id>'\n              await this.deleteCard(args[1]);\n            }\n            break;\n          case 'move':\n            if (args[0] === 'card') {\n              // Move a card if the command is 'move card <card_id> <list_id>'\n              await this.moveCard(args[1], args[2]);\n            }\n            break;\n          default:\n            // Set output to 'Unknown command' if the command is not recognized\n            this.output = 'Unknown command';\n        }\n      } catch (error) {\n        // Set output to error message if an error occurs\n        this.output = error.response ? error.response.data : error.message;\n      }\n    },\n    // Fetch boards from the server\n    async fetchBoards() {\n      try {\n        const response = await axios.get('/boards');\n        this.boards = response.data;\n      } catch (error) {\n        this.output = 'Error fetching boards: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Fetch lists from the server for a specific board\n    async fetchLists(boardId) {\n      try {\n        const response = await axios.get(`/lists/${boardId}`);\n        this.lists = response.data;\n      } catch (error) {\n        this.output = 'Error fetching lists: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Fetch cards from the server for a specified list\n    async fetchCards(listId) { \n      try {\n        const response = await axios.get(`/cards/${listId}`);\n        this.cards = response.data;\n      } catch (error) {\n        this.cards = 'Error fetching cards: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Create a new board\n    async createBoard(name) {\n      try {\n        const response = await axios.post('/boards', { name });\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error creating board: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Delete a board\n    async deleteBoard(boardId) {\n      try {\n        const response = await axios.delete(`/boards/${boardId}`);\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error deleting board: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Create a new list in a specific board\n    async createList(boardId, name) {\n      try {\n        const response = await axios.post('/lists', { boardId, name });\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error creating list: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Delete a list\n    async deleteList(listId) {\n      try {\n        const response = await axios.delete(`/lists/${listId}`);\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error deleting list: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Create a new card in a specific list\n    async createCard(listId, name, desc) {\n      try {\n        const response = await axios.post('/cards', { listId, name, desc });\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error creating card: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Move a card to a different list\n    async moveCard(cardId, listId) {\n      try {\n        const response = await axios.put(`/cards/${cardId}/idList`, { value: listId });\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error moving card: ' + (error.response ? error.response.data : error.message);\n      }\n    },\n    // Delete a card\n    async deleteCard(cardId) {\n      try {\n        const response = await axios.delete(`/cards/${cardId}`);\n        this.output = response.data;\n      } catch (error) {\n        this.output = 'Error deleting card: ' + (error.response ? error.response.data : error.message);\n      }\n    }\n  }\n};\n</script>\n\n<style>\nbody {\n  background-color: #2e2e2e; /* Background color for the entire page */\n  color: #dcdcdc; /* Default text color */\n  font-family: 'Courier New', Courier, monospace; /* Font style */\n  margin: 0; /* Remove default margin */\n  padding: 0; /* Remove default padding */\n}\n\n#app {\n  padding: 0; /* Remove default padding */\n}\n\n.header {\n  background-color: #1c1c1c; /* Background color for the header */\n  padding: 10px 20px; /* Padding inside the header */\n}\n\n.header .header-content {\n  display: inline-block; /* Inline block for header content */\n}\n\n.header h1 {\n  color: #ffffff; /* Text color for the header title */\n  margin: 0; /* Remove default margin */\n  cursor: pointer; /* Pointer cursor for clickable title */\n}\n\n.container {\n  display: flex; /* Flexbox layout for the container */\n  justify-content: center; /* Center the content horizontally */\n}\n\n.sidebar {\n  width: 20%; /* Width of the sidebar */\n  background-color: #1c1c1c; /* Background color for the sidebar */\n  padding: 20px; /* Padding inside the sidebar */\n  color: #dcdcdc; /* Text color for the sidebar */\n  text-align: left; /* Left-aligned text */\n  position: absolute; /* Positioned absolutely */\n  left: 0; /* Aligned to the left */\n  top: 70px; /* Adjusted to leave space for header */\n}\n\n.sidebar h2 {\n  border-bottom: 1px solid #444444; /* Bottom border for the sidebar heading */\n  padding-bottom: 10px; /* Padding below the heading */\n}\n\n.sidebar ul {\n  list-style: none; /* Remove default list style */\n  padding: 0; /* Remove default padding */\n}\n\n.sidebar li {\n  margin: 10px 0; /* Margin between list items */\n}\n\n.terminal-container {\n  width: 60%; /* Width of the terminal container */\n  display: flex; /* Flexbox layout for the terminal container */\n  flex-direction: column; /* Column layout */\n  align-items: center; /* Center align items */\n  padding: 20px; /* Padding inside the container */\n  margin-left: 20%; /* Adjusted to account for sidebar width */\n}\n\n.terminal-title {\n  color: #ffffff; /* Text color for the terminal title */\n  text-align: left; /* Left-aligned text */\n  margin-bottom: 10px; /* Space below the title */\n}\n\ntextarea {\n  width: 60%; /* Adjusted width to be slightly shorter */\n  height: 40px; /* Fixed height */\n  background-color: #000000; /* Background color for textarea */\n  color: #dcdcdc; /* Text color for textarea */\n  border: 1px solid #444444; /* Border for textarea */\n  margin-bottom: 10px; /* Margin below textarea */\n  padding: 10px; /* Padding inside textarea */\n  box-sizing: border-box; /* Include padding and border in width and height */\n  resize: none; /* Disable resizing */\n}\n\nbutton {\n  background-color: #444444; /* Background color for button */\n  color: #dcdcdc; /* Text color for button */\n  border: none; /* Remove border */\n  padding: 10px 20px; /* Padding inside button */\n  cursor: pointer; /* Pointer cursor for button */\n  margin-bottom: 10px; /* Margin below button */\n}\n\n.output {\n  text-align: left; /* Left-aligned text */\n  width: 100%; /* Full width */\n  margin-top: 20px; /* Margin above output */\n}\n\n.output pre {\n  background-color: #333333; /* Background color for preformatted text */\n  padding: 10px; /* Padding inside preformatted text */\n  border-radius: 5px; /* Rounded corners */\n  white-space: pre-wrap; /* Wrap text in preformatted text */\n}\n\n.output h2 {\n  color: #ffffff; /* Text color for headings in output */\n  margin-top: 20px; /* Margin above headings in output */\n}\n\n.output ul {\n  list-style-type: none; /* Remove default list style */\n  padding: 0; /* Remove default padding */\n}\n\n.output li {\n  margin-bottom: 10px; /* Margin between list items */\n}\n\n@media (max-width: 768px) {\n  .container {\n    flex-direction: column; /* Column layout on small screens */\n    align-items: center; /* Center align items */\n  }\n\n  .sidebar {\n    width: 100%; /* Full width for sidebar on small screens */\n    position: static; /* Revert position for mobile */\n    margin-bottom: 20px; /* Space between sidebar and terminal for mobile */\n  }\n\n  .terminal-container {\n    width: 100%; /* Full width for terminal container on small screens */\n    margin-left: 0; /* Remove margin for mobile */\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}